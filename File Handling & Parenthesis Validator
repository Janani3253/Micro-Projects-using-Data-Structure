#include <stdio.h>
#include <stdlib.h>
#include <string.h>

FILE *file;
struct properties {
    int line;
    int position;
    char bracket;
};
struct properties stackpro[1000];
int top = -1;

char closebracket(char open) {
    if (open=='(') return ')';
    if (open=='{') return '}';
    if (open=='[') return ']';
    return '\0';
}

void parenthesischeck(const char *filename) {
    top=-1;
    char line[1000];
    int error=0;
    file=fopen(filename, "r");
    if(file==NULL) {
        printf("File not found\n");
        return;
    }
    char ch;
    int linecount=0;
    while(fgets(line,sizeof(line),file)!=NULL) {
        int pos=0;
        linecount++;
        for(int i=0;line[i]!='\0';i++){
            ch=line[i];
            pos++;
            if(line[i]=='/' && line[i+1]=='*'){
                i=i+2;
                int cmd=0;
                while(line[i]!='\0'){
                    if(line[i]=='*' && line[i+1]=='/'){
                        i=i+2;
                        cmd=1;
                        break;
                    }
                    i++;
                }
                while(cmd==0 && fgets(line,sizeof(line),file)!=NULL){
                    pos=0;
                    linecount++;
                    for(int i=0;line[i]!='\0';i++){
                        if(line[i]=='*' && line[i+1]=='/'){
                            cmd=1;
                            i=i+2;
                            break;
                        }
                    }
                    if(cmd==1){
                        break;   
                    }
                    
                }
                if(cmd==0){
                    error=1;
                    printf("ERROR: Line: %d Command doesn't closed\n",linecount);
                }
                break;
                
            }
            else if(line[i]=='/' && line[i+1]=='/'){
                break;
            }
            else if (ch=='(' || ch=='{' || ch=='[') {
                
                if(ch=='(' || ch=='['){
                    int found=0;
                    for(int j=i+1;line[j]!='\0';j++){
                        if((ch=='(' && line[j]==')')||(ch=='[' && line[j]==']')){
                            found=1;
                            break;
                        }
                    }
                    if(found!=1){
                        printf("ERROR: Line: %d Position: %d Expected: %c reached end\n", linecount, pos, closebracket(ch));
                        error=1;
                        continue;
                    }
                }
                top++;
                stackpro[top].bracket = ch;
                stackpro[top].line = linecount;
                stackpro[top].position = pos;
                
            }
            else if(ch==')' || ch=='}' || ch==']') {
                if (top==-1) {
                    printf("ERROR: Line: %d Position: %d Mismatched Bracket: %c\n", linecount, pos, ch);
                    error=1;
                }
                else if (ch!=closebracket(stackpro[top].bracket)){
                    printf("ERROR: Line: %d Position: %d Expected %c but founded %c\n",stackpro[top].line, stackpro[top].position,closebracket(stackpro[top].bracket),ch);
                    error = 1;
                    top--;
                    
                }
                else {
                    top--;
                }
            }
            

        }
    }
        
    
    fclose(file);
    while (top!=-1) {
        printf("ERROR: Line: %d Position: %d Unmatched opening %c\n",stackpro[top].line, stackpro[top].position, stackpro[top].bracket);
        error=1;
        top--;
    }
    if (error==0) {
        printf("Balanced parenthesis\n");
    }
    
}

void createfile() {
    printf("=========CREATE YOUR FILE========\n");
    printf("Enter filename to create with .txt extension (Eg: Example.txt)\n");
    char filename[50];
    scanf(" %[^\n]", filename);
    while (getchar() != '\n');
    int len = strlen(filename);
    
    int start=len-4;
    char str[10];
    int k=0;
    for(int i=start;i<len;i++){
        str[k++]=filename[i];
    }
    str[k]='\0';
    if(len>=4 && strcmp(str,".txt")==0 ){
        printf("Valid FileName\n");
    }else{
        printf("Invalid FileName must ends with .txt\n");
        return;
    }
    file = fopen(filename, "w");
    if (file == NULL) {
        printf("%s is not created\n", filename);
        return;
    }
    char code[1000];
    printf("Enter your code (Type \"END\" to stop)\n");
    int lines = 0;
    while (lines<50) {
        if (fgets(code,sizeof(code),stdin)==NULL) 
        break;
        code[strcspn(code,"\n")]='\0';
        if (strcmp(code,"END")==0)
        break;
        fputs(code, file);
        fputc('\n', file);
        lines++;
    }
    printf("%s is created successfully with %d lines\n", filename, lines);
    fclose(file);
    parenthesischeck(filename);
}

void uploadfile() {
    printf("=========UPLOAD YOUR FILE========\n");
    char filename[50];
    printf("Enter your filename: ");
    scanf(" %[^\n]", filename);
    while (getchar() != '\n');
    int len = strlen(filename);
    
    int start=len-4;
    char str[10];
    int k=0;
    for(int i=start;i<len;i++){
        str[k++]=filename[i];
    }
    str[k]='\0';
    if(len>=4 && strcmp(str,".txt")==0 ){
        printf("Valid FileName\n");
    }else{
        printf("Invalid FileName must ends with .txt\n");
        return;
    }
    
    file = fopen(filename, "r");
    if (file == NULL) {
        printf("File not found\n");
        return;
    }
    printf("Your file content (max 50 lines):\n");
    char content[1000];
    int lines=0;
    while (fgets(content,sizeof(content),file)!=NULL && lines<50) {
        printf("%s", content);
        lines++;
    }
    printf("\n");
    fclose(file);
    parenthesischeck(filename);
}

int main() {
    int choice;
    while (1) {
        printf("\n1. Create file\n2. Upload file\n3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        while (getchar()!='\n');
        switch (choice) {
            case 1: 
            createfile(); 
            break;
            case 2: 
            uploadfile(); 
            break;
            case 3: 
            return 0;
            default:
            printf("Invalid choice\n");
            break;
        }
    }
}
