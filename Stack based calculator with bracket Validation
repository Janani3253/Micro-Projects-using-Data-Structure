#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>
#include<ctype.h>

int precedence(char op){
    if(op=='+' || op=='-')
        return 1;
    if(op=='*' || op=='/' || op=='%')
        return 2;
    if(op=='^')
        return 3;
    return 0;
}
char closebracket(char open){
    if(open=='(') return ')';
    if(open=='{') return '}';
    if(open=='[') return ']';
    return '\0';
}
char openbracket(char close){
    if(close==')') return '(';
    if(close=='}') return '{';
    if(close==']') return '[';
    return '\0';
}

int main(){
    char str[100];
    printf("Enter Expression : ");
    scanf(" %[^\n]",str);
   
    char stack[100];
    int top=-1;
    int len=strlen(str);
   
    char arr[200]; 
    int index=0;
   
    for(int i=0;i<len;i++){
        char ch=str[i];
        if(isspace(ch)){
            continue;
        }
        else if(isdigit(ch) || ch=='.'){
            int d_count=0;
            while(i<len && (isdigit(str[i]) || str[i]=='.')){
                if(str[i]=='.')
                d_count++;
                arr[index++]=str[i];
                i++;
            }
            if(d_count>1){
                printf("Invalid number\n");
                return 0;
            }
            arr[index++]=' ';
            i--; 
        }
        else if(ch=='(' || ch=='{' || ch=='['){
            if(top>=99){
                printf("Stack Overflow error.\n");
                return 0;
            }
            stack[++top]=ch;
        }
        else if(ch=='+'|| ch=='-'|| ch=='*'|| ch=='/' || ch=='%' || ch=='^'){
            if(i==0){
                if(ch=='+' || ch=='-'){
                    arr[index++]='0';
                    arr[index++]=' ';
                } else {
                    printf("Syntax Error: Expression cannot start with '%c'\n", ch);
                    return 0;
                }
            }
            else if(str[i-1]=='(' || str[i-1]=='{' || str[i-1]=='['){
                if(ch=='+' || ch=='-'){
                    arr[index++]='0';
                    arr[index++]=' ';
                } else {
                    printf("Syntax Error: Operator '%c' not valid after '('\n", ch);
                    return 0;
                }
            }
            else if(str[i-1]=='+' || str[i-1]=='-' || str[i-1]=='*' || 
                    str[i-1]=='/' || str[i-1]=='%' || str[i-1]=='^'){
                printf("Syntax Error: Unexpected operator '%c' after '%c'\n", ch, str[i-1]);
                return 0;
            }
            while(top!=-1 && stack[top]!='(' && stack[top]!='{' && stack[top]!='['  
                  && (precedence(stack[top]) >= precedence(ch))){
                arr[index++]=stack[top--];
                arr[index++]=' ';
            }
            if(top>=99){
                printf("Stack Overflow error.\n");
                return 0;
            }
            stack[++top]=ch;
        }
        else if(ch==')' || ch==']' || ch=='}'){
            if(top==-1){
                printf("Mismatched parenthesis.\nExpected %c but found %c\n",openbracket(ch), ch);
                return 0;
            }
            char expectedOpen = openbracket(ch);   
            while(top!=-1 && stack[top] != expectedOpen){
                if(stack[top]=='(' || stack[top]=='{' || stack[top]=='['){
                    printf("Mismatched parenthesis.\nExpected %c but found %c\n",closebracket(stack[top]), ch);
                    return 0;
                }
                arr[index++] = stack[top--];
                arr[index++] = ' ';
            }
            if(top==-1){
                printf("Syntax Error.\n");
                return 0;
            }
            top--; 
        }
        else{
            printf("Invalid Expression: Unexpected character '%c'\n",ch);
            return 0;
        }
    }
    while(top!=-1){
        if(stack[top]=='('||stack[top]=='{'||stack[top]=='['){
            printf("Mismatched parenthesis.\n");
            return 0;
        }
        arr[index++]=stack[top--];
        arr[index++]=' ';
    }
    arr[index]='\0'; 
   
    printf("Postfix Expression: %s\n",arr);
   
    int i;
    double res[100];
    int r=0;
   
    for(i=0;i<index;i++){
        if(isspace(arr[i])){
            continue;
        }
        else if(isdigit(arr[i]) || arr[i]=='.'){
            char numStr[50];
            int k=0;
            while(i<index && (isdigit(arr[i]) || arr[i]=='.')){
                numStr[k++]=arr[i++];
            }
            numStr[k]='\0';
            res[r++]=atof(numStr);
            continue; 
        }
        else if(arr[i]=='+' || arr[i]=='-' || arr[i]=='*' || arr[i]=='/' || arr[i]=='%' || arr[i]=='^'){
            if(r<2){
                printf("Syntax Error\n");
                return 0;
            }
            double ele2=res[--r];
            double ele1=res[--r];
            switch(arr[i]){
                case '+': 
                res[r++]=ele1+ele2; 
                break;
                case '-': 
                res[r++]=ele1-ele2; 
                break;
                case '*': 
                res[r++]=ele1*ele2; 
                break;
                case '/':
                    if(ele2==0){
                        printf("Error: Division by Zero\n");
                        return 0;
                    }
                    res[r++]=ele1/ele2; 
                    break;
                case '%': 
                    if((int)ele2==0){
                        printf("Error: Modulo by Zero\n");
                        return 0;
                    }
                    res[r++]=(int)ele1%(int)ele2; 
                    break;
                case '^': 
                res[r++]=pow(ele1,ele2); 
                break;
            }
        }
    }
    printf("Evaluation Result: %.2f\n",res[0]);
    return 0;
}
